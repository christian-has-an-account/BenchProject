//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace OnshoreKPI_API.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Entities : DbContext
    {
        public Entities()
            : base("name=Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Client> Clients { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<EmployeeType> EmployeeTypes { get; set; }
        public virtual DbSet<Role> Roles { get; set; }
        public virtual DbSet<Team> Teams { get; set; }
        public virtual DbSet<Reporting> Reportings { get; set; }
    
        public virtual int sp_DeleteClient(Nullable<int> clientID)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DeleteClient", clientIDParameter);
        }
    
        public virtual int sp_DeleteReportsByID(Nullable<int> reportingID)
        {
            var reportingIDParameter = reportingID.HasValue ?
                new ObjectParameter("ReportingID", reportingID) :
                new ObjectParameter("ReportingID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DeleteReportsByID", reportingIDParameter);
        }
    
        public virtual int sp_DeleteRole(Nullable<int> roleID)
        {
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DeleteRole", roleIDParameter);
        }
    
        public virtual int sp_DeleteTeam(Nullable<int> clientID, Nullable<int> teamID)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            var teamIDParameter = teamID.HasValue ?
                new ObjectParameter("TeamID", teamID) :
                new ObjectParameter("TeamID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DeleteTeam", clientIDParameter, teamIDParameter);
        }
    
        public virtual ObjectResult<sp_GetAllClients_Result> sp_GetAllClients()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetAllClients_Result>("sp_GetAllClients");
        }
    
        public virtual ObjectResult<sp_GetAllEmployee_Result> sp_GetAllEmployee()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetAllEmployee_Result>("sp_GetAllEmployee");
        }
    
        public virtual ObjectResult<sp_GetAllEmployeeTypes_Result> sp_GetAllEmployeeTypes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetAllEmployeeTypes_Result>("sp_GetAllEmployeeTypes");
        }
    
        public virtual ObjectResult<sp_GetAllReports_Result> sp_GetAllReports()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetAllReports_Result>("sp_GetAllReports");
        }
    
        public virtual ObjectResult<sp_GetAllRoles_Result> sp_GetAllRoles()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetAllRoles_Result>("sp_GetAllRoles");
        }
    
        public virtual ObjectResult<sp_GetAllTeams_Result> sp_GetAllTeams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetAllTeams_Result>("sp_GetAllTeams");
        }
    
        public virtual ObjectResult<sp_GetAllTeamsByClient_Result> sp_GetAllTeamsByClient(Nullable<int> clientID)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetAllTeamsByClient_Result>("sp_GetAllTeamsByClient", clientIDParameter);
        }
    
        public virtual ObjectResult<sp_GetEmployeeByClient_Result> sp_GetEmployeeByClient(Nullable<int> clientID)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetEmployeeByClient_Result>("sp_GetEmployeeByClient", clientIDParameter);
        }
    
        public virtual ObjectResult<sp_GetEmployeeByEmail_Result> sp_GetEmployeeByEmail(string email)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetEmployeeByEmail_Result>("sp_GetEmployeeByEmail", emailParameter);
        }
    
        public virtual ObjectResult<sp_GetEmployeeByTeam_Result> sp_GetEmployeeByTeam(Nullable<int> clientID, Nullable<int> teamID)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            var teamIDParameter = teamID.HasValue ?
                new ObjectParameter("TeamID", teamID) :
                new ObjectParameter("TeamID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetEmployeeByTeam_Result>("sp_GetEmployeeByTeam", clientIDParameter, teamIDParameter);
        }
    
        public virtual ObjectResult<sp_GetReportsByClient_Result> sp_GetReportsByClient(Nullable<int> clientID)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetReportsByClient_Result>("sp_GetReportsByClient", clientIDParameter);
        }
    
        public virtual ObjectResult<sp_GetReportsByDate_Result> sp_GetReportsByDate(Nullable<System.DateTime> date)
        {
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetReportsByDate_Result>("sp_GetReportsByDate", dateParameter);
        }
    
        public virtual ObjectResult<sp_GetReportsByEmployeeID_Result> sp_GetReportsByEmployeeID(Nullable<int> employeeID)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetReportsByEmployeeID_Result>("sp_GetReportsByEmployeeID", employeeIDParameter);
        }
    
        public virtual ObjectResult<sp_GetReportsByName_Result> sp_GetReportsByName(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetReportsByName_Result>("sp_GetReportsByName", nameParameter);
        }
    
        public virtual ObjectResult<sp_GetReportsByProxySubmission_Result> sp_GetReportsByProxySubmission(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetReportsByProxySubmission_Result>("sp_GetReportsByProxySubmission", nameParameter);
        }
    
        public virtual ObjectResult<sp_GetReportsByTeam_Result> sp_GetReportsByTeam(Nullable<int> teamID)
        {
            var teamIDParameter = teamID.HasValue ?
                new ObjectParameter("TeamID", teamID) :
                new ObjectParameter("TeamID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetReportsByTeam_Result>("sp_GetReportsByTeam", teamIDParameter);
        }
    
        public virtual ObjectResult<sp_GetReportsSelfSubmission_Result> sp_GetReportsSelfSubmission(string name)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetReportsSelfSubmission_Result>("sp_GetReportsSelfSubmission", nameParameter);
        }
    
        public virtual int sp_NewClient(string clientName)
        {
            var clientNameParameter = clientName != null ?
                new ObjectParameter("ClientName", clientName) :
                new ObjectParameter("ClientName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_NewClient", clientNameParameter);
        }
    
        public virtual int sp_NewEmployee(Nullable<int> roleID, Nullable<int> clientID, Nullable<int> teamID, Nullable<int> typeID, string firstName, string lastName, string email, string password)
        {
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            var teamIDParameter = teamID.HasValue ?
                new ObjectParameter("TeamID", teamID) :
                new ObjectParameter("TeamID", typeof(int));
    
            var typeIDParameter = typeID.HasValue ?
                new ObjectParameter("TypeID", typeID) :
                new ObjectParameter("TypeID", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_NewEmployee", roleIDParameter, clientIDParameter, teamIDParameter, typeIDParameter, firstNameParameter, lastNameParameter, emailParameter, passwordParameter);
        }
    
        public virtual int sp_NewEmployeeType(string typeName)
        {
            var typeNameParameter = typeName != null ?
                new ObjectParameter("TypeName", typeName) :
                new ObjectParameter("TypeName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_NewEmployeeType", typeNameParameter);
        }
    
        public virtual int sp_NewReport(Nullable<int> reportingID, Nullable<int> employeeID, Nullable<int> clientID, Nullable<int> teamID, Nullable<System.DateTime> startTime, Nullable<System.DateTime> completionTime, string name, string name2, Nullable<System.DateTime> date, Nullable<int> quantity, Nullable<int> textScriptExecutionOrders, Nullable<int> textScriptCreationErrors, Nullable<decimal> cardPoints, Nullable<decimal> timeSpent, Nullable<decimal> hoursEstimated, Nullable<decimal> hoursComplete, string email, string task)
        {
            var reportingIDParameter = reportingID.HasValue ?
                new ObjectParameter("ReportingID", reportingID) :
                new ObjectParameter("ReportingID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            var teamIDParameter = teamID.HasValue ?
                new ObjectParameter("TeamID", teamID) :
                new ObjectParameter("TeamID", typeof(int));
    
            var startTimeParameter = startTime.HasValue ?
                new ObjectParameter("StartTime", startTime) :
                new ObjectParameter("StartTime", typeof(System.DateTime));
    
            var completionTimeParameter = completionTime.HasValue ?
                new ObjectParameter("CompletionTime", completionTime) :
                new ObjectParameter("CompletionTime", typeof(System.DateTime));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var name2Parameter = name2 != null ?
                new ObjectParameter("Name2", name2) :
                new ObjectParameter("Name2", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            var textScriptExecutionOrdersParameter = textScriptExecutionOrders.HasValue ?
                new ObjectParameter("TextScriptExecutionOrders", textScriptExecutionOrders) :
                new ObjectParameter("TextScriptExecutionOrders", typeof(int));
    
            var textScriptCreationErrorsParameter = textScriptCreationErrors.HasValue ?
                new ObjectParameter("TextScriptCreationErrors", textScriptCreationErrors) :
                new ObjectParameter("TextScriptCreationErrors", typeof(int));
    
            var cardPointsParameter = cardPoints.HasValue ?
                new ObjectParameter("CardPoints", cardPoints) :
                new ObjectParameter("CardPoints", typeof(decimal));
    
            var timeSpentParameter = timeSpent.HasValue ?
                new ObjectParameter("TimeSpent", timeSpent) :
                new ObjectParameter("TimeSpent", typeof(decimal));
    
            var hoursEstimatedParameter = hoursEstimated.HasValue ?
                new ObjectParameter("HoursEstimated", hoursEstimated) :
                new ObjectParameter("HoursEstimated", typeof(decimal));
    
            var hoursCompleteParameter = hoursComplete.HasValue ?
                new ObjectParameter("HoursComplete", hoursComplete) :
                new ObjectParameter("HoursComplete", typeof(decimal));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var taskParameter = task != null ?
                new ObjectParameter("Task", task) :
                new ObjectParameter("Task", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_NewReport", reportingIDParameter, employeeIDParameter, clientIDParameter, teamIDParameter, startTimeParameter, completionTimeParameter, nameParameter, name2Parameter, dateParameter, quantityParameter, textScriptExecutionOrdersParameter, textScriptCreationErrorsParameter, cardPointsParameter, timeSpentParameter, hoursEstimatedParameter, hoursCompleteParameter, emailParameter, taskParameter);
        }
    
        public virtual int sp_NewRole(string roleName)
        {
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_NewRole", roleNameParameter);
        }
    
        public virtual int sp_NewTeam(string teamName, Nullable<int> clientID)
        {
            var teamNameParameter = teamName != null ?
                new ObjectParameter("TeamName", teamName) :
                new ObjectParameter("TeamName", typeof(string));
    
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_NewTeam", teamNameParameter, clientIDParameter);
        }
    
        public virtual int sp_UpdateClient(Nullable<int> clientID, string clientName)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            var clientNameParameter = clientName != null ?
                new ObjectParameter("ClientName", clientName) :
                new ObjectParameter("ClientName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateClient", clientIDParameter, clientNameParameter);
        }
    
        public virtual int sp_UpdateEmployee(Nullable<int> employeeID, Nullable<int> roleID, Nullable<int> clientID, Nullable<int> clientID2, Nullable<int> clientID3, Nullable<int> clientID4, Nullable<int> teamID, Nullable<int> typeID, string firstName, string lastName, string email, string password)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            var clientID2Parameter = clientID2.HasValue ?
                new ObjectParameter("ClientID2", clientID2) :
                new ObjectParameter("ClientID2", typeof(int));
    
            var clientID3Parameter = clientID3.HasValue ?
                new ObjectParameter("ClientID3", clientID3) :
                new ObjectParameter("ClientID3", typeof(int));
    
            var clientID4Parameter = clientID4.HasValue ?
                new ObjectParameter("ClientID4", clientID4) :
                new ObjectParameter("ClientID4", typeof(int));
    
            var teamIDParameter = teamID.HasValue ?
                new ObjectParameter("TeamID", teamID) :
                new ObjectParameter("TeamID", typeof(int));
    
            var typeIDParameter = typeID.HasValue ?
                new ObjectParameter("TypeID", typeID) :
                new ObjectParameter("TypeID", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateEmployee", employeeIDParameter, roleIDParameter, clientIDParameter, clientID2Parameter, clientID3Parameter, clientID4Parameter, teamIDParameter, typeIDParameter, firstNameParameter, lastNameParameter, emailParameter, passwordParameter);
        }
    
        public virtual int sp_UpdateEmployeeType(Nullable<int> typeID, string typeName)
        {
            var typeIDParameter = typeID.HasValue ?
                new ObjectParameter("TypeID", typeID) :
                new ObjectParameter("TypeID", typeof(int));
    
            var typeNameParameter = typeName != null ?
                new ObjectParameter("TypeName", typeName) :
                new ObjectParameter("TypeName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateEmployeeType", typeIDParameter, typeNameParameter);
        }
    
        public virtual int sp_UpdateReport(Nullable<int> reportingID, Nullable<System.DateTime> startTime, Nullable<System.DateTime> completionTime, string name, Nullable<System.DateTime> date, Nullable<int> quantity, Nullable<int> textScriptExecutionOrders, Nullable<int> textScriptCreationErrors, Nullable<decimal> cardPoints, Nullable<decimal> timeSpent, Nullable<decimal> hoursEstimated, Nullable<decimal> hoursComplete, string task)
        {
            var reportingIDParameter = reportingID.HasValue ?
                new ObjectParameter("ReportingID", reportingID) :
                new ObjectParameter("ReportingID", typeof(int));
    
            var startTimeParameter = startTime.HasValue ?
                new ObjectParameter("StartTime", startTime) :
                new ObjectParameter("StartTime", typeof(System.DateTime));
    
            var completionTimeParameter = completionTime.HasValue ?
                new ObjectParameter("CompletionTime", completionTime) :
                new ObjectParameter("CompletionTime", typeof(System.DateTime));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            var textScriptExecutionOrdersParameter = textScriptExecutionOrders.HasValue ?
                new ObjectParameter("TextScriptExecutionOrders", textScriptExecutionOrders) :
                new ObjectParameter("TextScriptExecutionOrders", typeof(int));
    
            var textScriptCreationErrorsParameter = textScriptCreationErrors.HasValue ?
                new ObjectParameter("TextScriptCreationErrors", textScriptCreationErrors) :
                new ObjectParameter("TextScriptCreationErrors", typeof(int));
    
            var cardPointsParameter = cardPoints.HasValue ?
                new ObjectParameter("CardPoints", cardPoints) :
                new ObjectParameter("CardPoints", typeof(decimal));
    
            var timeSpentParameter = timeSpent.HasValue ?
                new ObjectParameter("TimeSpent", timeSpent) :
                new ObjectParameter("TimeSpent", typeof(decimal));
    
            var hoursEstimatedParameter = hoursEstimated.HasValue ?
                new ObjectParameter("HoursEstimated", hoursEstimated) :
                new ObjectParameter("HoursEstimated", typeof(decimal));
    
            var hoursCompleteParameter = hoursComplete.HasValue ?
                new ObjectParameter("HoursComplete", hoursComplete) :
                new ObjectParameter("HoursComplete", typeof(decimal));
    
            var taskParameter = task != null ?
                new ObjectParameter("Task", task) :
                new ObjectParameter("Task", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateReport", reportingIDParameter, startTimeParameter, completionTimeParameter, nameParameter, dateParameter, quantityParameter, textScriptExecutionOrdersParameter, textScriptCreationErrorsParameter, cardPointsParameter, timeSpentParameter, hoursEstimatedParameter, hoursCompleteParameter, taskParameter);
        }
    
        public virtual int sp_UpdateRole(Nullable<int> roleID, string roleName)
        {
            var roleIDParameter = roleID.HasValue ?
                new ObjectParameter("RoleID", roleID) :
                new ObjectParameter("RoleID", typeof(int));
    
            var roleNameParameter = roleName != null ?
                new ObjectParameter("RoleName", roleName) :
                new ObjectParameter("RoleName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateRole", roleIDParameter, roleNameParameter);
        }
    
        public virtual int sp_UpdateTeam(Nullable<int> teamID, Nullable<int> clientID, string teamName)
        {
            var teamIDParameter = teamID.HasValue ?
                new ObjectParameter("TeamID", teamID) :
                new ObjectParameter("TeamID", typeof(int));
    
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            var teamNameParameter = teamName != null ?
                new ObjectParameter("TeamName", teamName) :
                new ObjectParameter("TeamName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateTeam", teamIDParameter, clientIDParameter, teamNameParameter);
        }
    }
}
